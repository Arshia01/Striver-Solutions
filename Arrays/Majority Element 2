Brute : O(n^2)

Better : Hash maps
class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        
        unordered_map <int, int> mp;
        int n = nums.size();
        vector<int> ans;

        for(int i=0; i<n; i++){
            mp[nums[i]]++;
        }
        for(auto it = mp.begin(); it!=mp.end(); it++){
            if(it->second > n/3){
                ans.push_back(it->first);
            }
        }
        return ans;
    }
};

Best : Boyer Moore Voting Algo
class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        
        int n = nums.size();
        vector<int> ans;
        int e1, e2;
        int c1=0, c2=0;
        
        for(int i=0; i<n; i++){
            if(e1 == nums[i]){
                c1++;
            }
            else if(e2 == nums[i]){
                c2++;
            }
            else if(c1 == 0){
                e1 = nums[i];
                c1++;
            }
            else if(c2 == 0){
                e2 = nums[i];
                c2++;
            }
            else{
                c1--;
                c2--;
            }
        }
        //check if e1 is actually > n/3
        int c=0;
        for(int i=0; i<n; i++){
            if(nums[i] == e1){
                c++;
            }
        }
        if(c > n/3){
            ans.push_back(e1);
        }
         //check if e2 is actually > n/3
        c=0;
        for(int i=0; i<n; i++){
            if(nums[i] == e2){
                c++;
            }
        }
        if(c > n/3){
            ans.push_back(e2);
        }
        return ans;
    }
};
