//present even if array is rotated
//create a new string and push the original string twice so that you do not have to rotate it
//.find function returns npos when it is unable to find any matches

class Solution {
public:
    bool rotateString(string s, string goal) {
    
    int m = s.length() ;
    int n = goal.length();
    int i;
    
    if(m!=n){
        return 0;
    }
        
        string temp;
        temp = s + s;
        
        if(temp.find(goal) != std::string::npos)
            return 1;
        return 0;
    
    }
};
