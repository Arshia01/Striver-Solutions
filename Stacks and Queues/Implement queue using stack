/*APPROACH 1
  push operation :  O(N)
      s1 -> s2
      x  -> s1
      s2 -> s1
  pop / peek : O(1) -> top of s1  
  queue order in s1⭐
*/

class MyQueue {
public:
    stack <int>s1;
    stack <int>s2;
    
    MyQueue() {
        
    }
    
    void push(int x) {
        while(s1.size()>0){
            s2.push(s1.top());
            s1.pop();
        }
        s1.push(x);
        while(s2.size()>0){
            s1.push(s2.top());
            s2.pop();
        }
    }
    
    int pop() {
        int x = peek();
        s1.pop();
        return x;
    }
    
    int peek() {
        return s1.top();
    }
    
    bool empty() {
        if(s1.size()==0)
            return true;
        return false;
    }
};


/*
   APPROACH 2 : amortized
   push in s1
   s2: the queue in order ⭐
   i.e pop / peek from s2
   
*/


class MyQueue {
public:
    stack <int>s1;
    stack <int>s2;
    
    MyQueue() {
        
    }
    
    void push(int x) {
        s1.push(x);
    }
    
    int pop() {
        int x;
        if(s2.size()>0){
            x = s2.top();
            s2.pop();
        }
        else {
            while(s1.size()!=0){
                s2.push(s1.top());
                s1.pop();
            }
            x = s2.top();
            s2.pop();
        }
        return x;
    }
    
    int peek() {
        if(s2.size()>0){
            return s2.top();
        }
        
            while(s1.size()!=0){
                s2.push(s1.top());
                s1.pop();
            }
        
        return s2.top();
    }
    
    bool empty() {
        if(s1.size()==0 && s2.size()==0)
            return true;
        return false;
    }
};


/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue* obj = new MyQueue();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->peek();
 * bool param_4 = obj->empty();
 */
